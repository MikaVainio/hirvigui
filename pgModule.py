# A MODULE FOR ACCESING POSTGRESQL DATABASES AND FOR SAVING CONNECTION SETTINGS TO A FILE
# =======================================================================================

# LIBRARIES AND MODULES
# ----------------------
import psycopg2
import json

# CLASS DEFINITIONS
# ------------------
class DatabaseOperation():

    """DatabaseOperation class is for connecting to PostgreSQL databases,
       executing various SQL transactions and returning result sets. 
    """
    
    # The constructor
    def __init__(self):

        # Set properties to their default values
        self.errorCode = 0 # An error code, 0 means no error
        self.errorMessage = 'OK' # A message explaining the error in finnish
        self.detailedMessage = '' # A detailed error message generated by psycopg2 library in english
        self.resultset = [] # Empty list
        self.columnHeaders = [] # Empty list
        self.rows = 0 
        self.columns = 0

    # A method to save connection settings to a JSON file    
    def saveDbSettingsToJsonFile(self, file, connectionArgs):

        """Writes connection arguments to json file. Arguments can be
           created with createConnectionArgs method

        Args:
            file (str): Name of the file to write connection arguments
            connectionArgs (dict): Dictionary of connection arguments
        """
        
        settingsFile = open(file, 'w') # Opens settings file for writing
        json.dump(connectionArgs, settingsFile) # Write dictionary in JSON format to file
        settingsFile.close() # Close the file after

    # A method to read connection settings from a JSON file 
    def readDbSettingsFromJsonFile(self, file):

        """Reads connection arguments from json file and converts
           argumentst to dictionary format

        Args:
            file (str): Name of JSON file containing connection parameters

        Returns:
            dict: Connection arguments
        """

        settingsFile = open(file, 'r')
        connectionArgs = json.load(settingsFile)
        settingsFile.close()
        return connectionArgs
    
    # A method to build connection string parameters as a dictionary for further use
    def createConnectionArgs(self, database, role, password, server='localhost', port='5432'):

        """Builds a dictionary for connecting the database

        Args:
            database (str): Name of the database connect to
            role (str): Login role to use when connecting
            password (str): Login role's password to use
            server (str, optional): Name or IP address of postgreSQL server. Defaults to 'localhost'.
            port (str, optional): TCP port which postgreSQL server is using. Defaults to '5432'.

        Returns:
            dict: Connection parameters in key-value pairs
        """

        # Create an empty dictionary and then add arguments as values
        connectionArgs = {}
        connectionArgs['server'] = server
        connectionArgs['port'] = port
        connectionArgs['database'] = database
        connectionArgs['role'] = role
        connectionArgs['pwd'] = password

        return connectionArgs

    # Amethod to connect a database and retrieve result set from a table or a function
    def connectDbGetAllRows(self, connectionArgs, tableName):

        """Selects all rows from a table or from a function and sets properties of
           an error (code and text) and the puts results into result set property
           of the object

        Args:
            connectionArgs (dict): Database connection parameters in key-value pairs
            tableName (str): Name of the table or function where to select data from

        """
        
        # Read values from dictionary to  singel variables (helps code reading)
        server = connectionArgs['server']
        port = connectionArgs['port']
        database = connectionArgs['database']
        role = connectionArgs['role']
        pwd = connectionArgs['pwd']

        # Try to establish a connection to the server
        try:
            dbconnection = psycopg2.connect(database = database, user = role, password = pwd,
                                                    host = server, port = port)

            self.errorCode = 0 # No error
            self.errorMessage = 'Tietokantayhteys muodostettiin onnistuneesti'

            # Create an automatically closing cursor to execute commands on the connection
            with dbconnection.cursor() as cursor:

                sqlClause = "SELECT * FROM " + tableName + ";" # Build  a SQL clause accordingly
                cursor.execute(sqlClause) # Execute the clause using the cursor

                # Count amount of rows in the result set -> set the number of rows in the table widget
                self.rows = cursor.rowcount

                # Set error status accordingly
                self.errorMessage = 'Tulosjoukko noudettiin onnistuneesti'

                # Get records from the cursor (expectig several rows)
                self.resultset = cursor.fetchall()

                # Create a list of column headers from cursor.description, name is the first item in the description
                self.columnHeaders = [cname[0] for cname in cursor.description]

                # Count the column headers to determine number of columns in the result set
                self.columns = len(self.columnHeaders)

        except (Exception, psycopg2.Error) as error:
            self.errorCode = 1
            self.errorMessage = 'Virhe yhdistettäessä tietokantaan'
            self.detailedMessage = str(error)
            records = []

        finally:
            if self.errorCode == 0:
                dbconnection.close()
        ## return records


if __name__ == "__main__":

    # Lets create a database operation object and make some tests
    databaseOperation = DatabaseOperation()

    # Create a connection to default server and port (ie localhost 5432)
    originalDbArguments = databaseOperation.createConnectionArgs('psycotesti','sovellus','Q2werty')

    print('Määritellyt asetukset:', originalDbArguments)

    # Define a settings file for the connection 
    settingsFile = 'connectionSettings.dat'

    # Save the settings
    databaseOperation.saveDbSettingsToJsonFile(settingsFile, originalDbArguments)

    # Read the settings
    currentDbArguments = databaseOperation.readDbSettingsFromJsonFile(settingsFile)

    # Connect with settings read
    databaseOperation.connectDbGetAllRows(currentDbArguments,'person')

    # Show properties of the object on terminal
    print('Virhekoodi', databaseOperation.errorCode, 'virhesanoma:', databaseOperation.errorMessage)
    print('Sarakeotsikot', databaseOperation.columnHeaders)
    print('Rivejä', databaseOperation.rows)
    print('Sarakkeita', databaseOperation.columns)
    print('Tulosjoukko: ', databaseOperation.resultset)